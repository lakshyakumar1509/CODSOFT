# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GN9tYS8H7UJft02glLcOQTfWn7urWfpb
"""



"""Name: Lakshya R
Domain: Data Science Internship
TASK 2:MOVIE RATING PREDICTION WITH PYTHON

Importing files and libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

file_path = '/content/IMDb Movies India.csv'
movies_df = pd.read_csv(file_path, encoding='unicode_escape')

print(movies_df.head(20))

"""Data Cleaning

"""

print(movies_df.isnull().sum())
print(movies_df.info())

movies_df.dropna(inplace=True)

movies_df.drop_duplicates(inplace=True)

"""Data preprocessing

"""

movies_df['Year'] = movies_df['Year'].str.replace(r'[()]', '', regex=True).astype(int)

movies_df['Duration'] = pd.to_numeric(movies_df['Duration'].str.replace(' min', ''))

movies_df['Genre'] = movies_df['Genre'].str.split(', ')
movies_df = movies_df.explode('Genre')
movies_df['Genre'].fillna(movies_df['Genre'].mode()[0], inplace=True)

movies_df['Votes'] = pd.to_numeric(movies_df['Votes'].str.replace(',', ''))

print(movies_df.info())

"""Data Visualisation

"""

fig_years = px.histogram(movies_df, x='Year', histnorm='probability density', nbins=30)
fig_years.show()

avg_rating_year_genre = movies_df.groupby(['Year', 'Genre'])['Rating'].mean().reset_index()
top_genres_list = movies_df['Genre'].value_counts().head(10).index
filtered_avg_rating = avg_rating_year_genre[avg_rating_year_genre['Genre'].isin(top_genres_list)]

fig_avg_rating = px.line(filtered_avg_rating, x='Year', y='Rating', color='Genre')
fig_avg_rating.update_layout(title='Average Rating by Year for Top Genres', xaxis_title='Year', yaxis_title='Average Rating')
fig_avg_rating.show()

fig_ratings = px.histogram(movies_df, x='Rating', histnorm='probability density', nbins=40)
fig_ratings.update_layout(
    title='Distribution of Rating',
    title_x=0.5,
    title_pad=dict(t=20),
    title_font=dict(size=20),
    xaxis_title='Rating',
    yaxis_title='Probability Density',
    xaxis=dict(showgrid=False),
    yaxis=dict(showgrid=False),
    bargap=0.02,
    plot_bgcolor='white'
)
fig_ratings.show()

"""Model building

"""

movies_df['Genre_avg_rating'] = movies_df.groupby('Genre')['Rating'].transform('mean')
movies_df['Director_avg_rating'] = movies_df.groupby('Director')['Rating'].transform('mean')
movies_df['Actor1_avg_rating'] = movies_df.groupby('Actor 1')['Rating'].transform('mean')
movies_df['Actor2_avg_rating'] = movies_df.groupby('Actor 2')['Rating'].transform('mean')
movies_df['Actor3_avg_rating'] = movies_df.groupby('Actor 3')['Rating'].transform('mean')

X = movies_df[['Year', 'Votes', 'Duration', 'Genre_avg_rating', 'Director_avg_rating', 'Actor1_avg_rating', 'Actor2_avg_rating', 'Actor3_avg_rating']]
y = movies_df['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

predictions = linear_model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print('Model Performance Evaluation:')
print('Mean Squared Error:', mse)
print('Mean Absolute Error:', mae)
print('R2 Score:', r2)

X.head(5)

"""Model Testing"""

data_ts_eras_tour_film = {'Year': [2023],
        'Votes': [13],
        'Duration': [169],
        'Genre_avg_rating': [10.0],
        'Director_avg_rating': [10.0],
        'Actor1_avg_rating': [10.0],
        'Actor2_avg_rating': [9.5],
        'Actor3_avg_rating': [9.0]}
test_data = pd.DataFrame(data_ts_eras_tour_film)

# Predict the movie rating using the trained model
rating_predicted = linear_model.predict(test_data)  # Replace linear_model with the name of your trained model

# Display the predicted result from the Model
print("Predicted Rating:", rating_predicted[0])